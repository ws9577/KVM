# the host and other hosts in the same LAN should be able to access to KVMs
network:
  version: 2
  renderer: networkd
  ethernets:
    enp4s0:
      dhcp4: no  # Disable DHCP on the physical interface, as the bridge will handle IP allocation.
  bridges:
    br0:
      interfaces: [enp4s0]
      dhcp4: yes  # Enable DHCP on the bridge interface to get an IP for the host.
      addresses:  # Optional static IPs for the host, if needed.
        - 192.168.0.110/24
        - 192.168.0.111/24
      nameservers:
        addresses: [192.168.0.1]
      parameters:
        stp: true  # Enable STP to avoid network loops.
        forward-delay: 4


sudo virsh net-destroy default   # This stops the network
sudo virsh net-autostart --disable default   # This prevents it from starting at boot



# Bridge + VLAN
network:
  version: 2
  renderer: networkd
  ethernets:
    enp4s0:
      dhcp4: true
  bridges:
    virbr0:
      interfaces: [enp4s0.100]
      dhcp4: false
      addresses: []
      parameters:
        stp: true
        forward-delay: 0
      vlans:
        vlan100:
          id: 100
  vlans:
    enp4s0.100:
      id: 100
      link: enp4s0
      addresses: []
# In this configuration: A new VLAN interface vlan100 is added under the ivrbr0 bridge with an ID of 100.
# The enp4s0.100 VLAN interface is still created and bound to the bridge virbr0.
# This configuration allows the host to communicate with the virtual machines through VLAN 100 on the bridge interface br0,
# while the host's physical Ethernet interface enp0s3 remains connected to the external LAN without any VLAN tagging.

# option 2
network:
  version: 2
  renderer: networkd
  ethernets:
    enp4s0:
      dhcp4: true
  wifis:
    wlo1:
      dhcp4: true
      access-points:
        "YOUR_SSID":
          password: "YOUR_WIFI_PASSWORD"
  bridges:
    virbr0:
      interfaces: [enp4s0]
      dhcp4: true
      parameters:
        stp: true
        forward-delay: 4
      routing-policy:
        - from: 0.0.0.0/0
          metric: 100

# old bridge
network:
  version: 2
  renderer: NetworkManager
  ethernets:
    ens4p0:
      addresses:
        - 192.168.0.110/24
      gateway4: 192.168.0.1
      nameservers:
        addresses: [8.8.8.8, 8.8.4.4]
  bridges:
    virbr0:
      interfaces: [ens4p0]
      dhcp4: no
      addresses: []

# claude method, vmx.xml
<interface type='direct'>
  <source dev='enp4s0' mode='bridge'/>
  <ip address='192.168.0.101' netmask='255.255.255.0'>
    <route gateway='192.168.0.1'/>
  </ip>
</interface>


# YT method, destroy and rebuild
https://octetz.com/

qemu:///system
qemu://user@192.168.0.1/system
qemu:///user

virsh net-list
virsh list
virsh list --all

ps aux | grep -i dnsmasq
/var/lib/libvirt/dnsmasq/default.conf
virsh dumpxml XXX | grep -i 'network='

virsh net-dhcp-leases default 

route

virsh net-destory default
virsh shutdown XXXXXX

ip link set eno1 down
ip add del 192.168.0.100/16 dev eno1

systemctl status NetworkManager
# systend-networkd network automation
# /etc/systemd/network
systemctl status systend-networkd

ip link add name br0 type bridge
ip link set eno1 master br0

ip addr add 192.168.0.111/16 dev br0 brd 192.168.255.255
ip link set up eno1
ip link set up br0

arping 192.168.0.111 -I eth0

route add default gw 192.168.0.1

# edit systemd.networkd
/etc/systemd/network/

vim br.netdev # add dev
[NetDev]
Name=br0
Kind=bridge

vim bind01.netdev
[Match]
Name=eno1

[Network]
Bridge=br0

vim br0-dhcp.network
[Match]
Name=br0

[Network]
DHCP=ipv4

/etc/netplan #configure static IP



# dhcp=true
  addresses:
  -  192.168.122.110
  gateway4: 192.168.122.1
  NameServer:
    [192.268.0.1,8.8.8.8]

# fluid ip
# Let NetworkManager manage all devices on this system
network:
  version: 2
  renderer: NetworkManager
  bridges:
    virbr0:
      interfaces: [ens4p0]
      dhcp4: yes
      addresses: []



